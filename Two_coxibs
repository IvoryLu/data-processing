#Part 1 - Data Preprocessing

#Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from sas7bdat import SAS7BDAT
from datetime import datetime

#Part 1 - Data Processing
#Importing the dataset
dataset = pd.read_csv('C:\\Juan Lu\\Data\\M01AH&E\\Coxib.csv')
X = dataset.iloc[:,1:30].values
y = dataset.iloc[:,30].values

#Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

#Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

#Part 2 - ANN
#Importing the Keras libraries and packages
import keras
from keras.models import Sequential
from keras.layers import Dense

#Initialising the ANN
classifier = Sequential()

#Adding the input layer and the first hidden layer
classifier.add(Dense(input_dim = 29,units= 50, init = "uniform", activation= "relu"))
# output_dim is number of output nodes
# Init weights
# relu rectifier activation function
# input_dim number of input coloumns

#Adding the second hidden layer
classifier.add(Dense(units = 50, kernel_initializer = "uniform", activation= "relu"))

#Adding the third hidden layer
classifier.add(Dense(units = 50, kernel_initializer = "uniform", activation= "relu"))

#Adding the output layer
classifier.add(Dense(units = 1, kernel_initializer = "uniform", activation= "sigmoid"))

#Compiling the ANN
#classifier.compile(optimizer = 'sgd', loss = 'mean_squared_error', metrics = ['accuracy'])
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

#Custom loss function
#import keras.backend as K
#def customLoss(y_test, y_pred):


#Fitting the ANN to the Training set
classifier.fit(X_train, y_train, batch_size=10, epochs=50)

#Part 3 - Making the predictions and evaluating the model
#Predicting the Test
y_pred = classifier.predict(X_test)
y_pred = (y_pred > 0.5)

#Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

